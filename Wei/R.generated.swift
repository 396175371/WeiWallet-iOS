//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 26 images.
  struct image {
    /// Image `bg_wallet`.
    static let bg_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_wallet")
    /// Image `icon_backup`.
    static let icon_backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_backup")
    /// Image `icon_card_receive`.
    static let icon_card_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_card_receive")
    /// Image `icon_card_send`.
    static let icon_card_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_card_send")
    /// Image `icon_card_waiting`.
    static let icon_card_waiting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_card_waiting")
    /// Image `icon_empty`.
    static let icon_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_empty")
    /// Image `icon_exchange`.
    static let icon_exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_exchange")
    /// Image `icon_failed`.
    static let icon_failed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_failed")
    /// Image `icon_history_failed`.
    static let icon_history_failed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_history_failed")
    /// Image `icon_history_receive`.
    static let icon_history_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_history_receive")
    /// Image `icon_history_send`.
    static let icon_history_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_history_send")
    /// Image `icon_history_waiting`.
    static let icon_history_waiting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_history_waiting")
    /// Image `icon_memo`.
    static let icon_memo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_memo")
    /// Image `icon_receive`.
    static let icon_receive = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_receive")
    /// Image `icon_send_failed`.
    static let icon_send_failed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send_failed")
    /// Image `icon_send_success`.
    static let icon_send_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send_success")
    /// Image `icon_send`.
    static let icon_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_splash_logo`.
    static let icon_splash_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_splash_logo")
    /// Image `icon_waitng`.
    static let icon_waitng = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_waitng")
    /// Image `icon_warning`.
    static let icon_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_warning")
    /// Image `logo_vertical`.
    static let logo_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_vertical")
    /// Image `toolbar_shadow`.
    static let toolbar_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar_shadow")
    /// Image `tutorial_first`.
    static let tutorial_first = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_first")
    /// Image `tutorial_second`.
    static let tutorial_second = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_second")
    /// Image `tutorial_third`.
    static let tutorial_third = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial_third")
    
    /// `UIImage(named: "bg_wallet", bundle: ..., traitCollection: ...)`
    static func bg_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_backup", bundle: ..., traitCollection: ...)`
    static func icon_backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_card_receive", bundle: ..., traitCollection: ...)`
    static func icon_card_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_card_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_card_send", bundle: ..., traitCollection: ...)`
    static func icon_card_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_card_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_card_waiting", bundle: ..., traitCollection: ...)`
    static func icon_card_waiting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_card_waiting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_empty", bundle: ..., traitCollection: ...)`
    static func icon_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_exchange", bundle: ..., traitCollection: ...)`
    static func icon_exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_exchange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_failed", bundle: ..., traitCollection: ...)`
    static func icon_failed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_failed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_history_failed", bundle: ..., traitCollection: ...)`
    static func icon_history_failed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history_failed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_history_receive", bundle: ..., traitCollection: ...)`
    static func icon_history_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_history_send", bundle: ..., traitCollection: ...)`
    static func icon_history_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_history_waiting", bundle: ..., traitCollection: ...)`
    static func icon_history_waiting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_history_waiting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_memo", bundle: ..., traitCollection: ...)`
    static func icon_memo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_memo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_receive", bundle: ..., traitCollection: ...)`
    static func icon_receive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_receive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_send", bundle: ..., traitCollection: ...)`
    static func icon_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_send_failed", bundle: ..., traitCollection: ...)`
    static func icon_send_failed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send_failed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_send_success", bundle: ..., traitCollection: ...)`
    static func icon_send_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_splash_logo", bundle: ..., traitCollection: ...)`
    static func icon_splash_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_splash_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_waitng", bundle: ..., traitCollection: ...)`
    static func icon_waitng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_waitng, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_warning", bundle: ..., traitCollection: ...)`
    static func icon_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_warning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_vertical", bundle: ..., traitCollection: ...)`
    static func logo_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_vertical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar_shadow", bundle: ..., traitCollection: ...)`
    static func toolbar_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbar_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorial_first", bundle: ..., traitCollection: ...)`
    static func tutorial_first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorial_second", bundle: ..., traitCollection: ...)`
    static func tutorial_second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_second, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorial_third", bundle: ..., traitCollection: ...)`
    static func tutorial_third(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial_third, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `BalanceAccessoryView`.
    static let balanceAccessoryView = _R.nib._BalanceAccessoryView()
    /// Nib `TutorialTopView`.
    static let tutorialTopView = _R.nib._TutorialTopView()
    
    /// `UINib(name: "BalanceAccessoryView", in: bundle)`
    static func balanceAccessoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceAccessoryView)
    }
    
    /// `UINib(name: "TutorialTopView", in: bundle)`
    static func tutorialTopView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialTopView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `LatestTransactionListViewCell`.
    static let latestTransactionListViewCell: Rswift.ReuseIdentifier<LatestTransactionListViewCell> = Rswift.ReuseIdentifier(identifier: "LatestTransactionListViewCell")
    /// Reuse identifier `MnemonicWordViewCell`.
    static let mnemonicWordViewCell: Rswift.ReuseIdentifier<MnemonicWordViewCell> = Rswift.ReuseIdentifier(identifier: "MnemonicWordViewCell")
    /// Reuse identifier `SettingViewCell`.
    static let settingViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingViewCell")
    /// Reuse identifier `TransactionHistoryViewCell`.
    static let transactionHistoryViewCell: Rswift.ReuseIdentifier<TransactionHistoryViewCell> = Rswift.ReuseIdentifier(identifier: "TransactionHistoryViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 21 storyboards.
  struct storyboard {
    /// Storyboard `AgreeServiceTermsViewController`.
    static let agreeServiceTermsViewController = _R.storyboard.agreeServiceTermsViewController()
    /// Storyboard `BackupViewController`.
    static let backupViewController = _R.storyboard.backupViewController()
    /// Storyboard `CreateWalletViewController`.
    static let createWalletViewController = _R.storyboard.createWalletViewController()
    /// Storyboard `DebugListViewController`.
    static let debugListViewController = _R.storyboard.debugListViewController()
    /// Storyboard `HomeViewController`.
    static let homeViewController = _R.storyboard.homeViewController()
    /// Storyboard `LatestTransactionListViewController`.
    static let latestTransactionListViewController = _R.storyboard.latestTransactionListViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MaintenanceViewController`.
    static let maintenanceViewController = _R.storyboard.maintenanceViewController()
    /// Storyboard `MyWalletViewController`.
    static let myWalletViewController = _R.storyboard.myWalletViewController()
    /// Storyboard `ReceiveViewController`.
    static let receiveViewController = _R.storyboard.receiveViewController()
    /// Storyboard `RestoreWalletViewController`.
    static let restoreWalletViewController = _R.storyboard.restoreWalletViewController()
    /// Storyboard `SelectAddressByPasteViewController`.
    static let selectAddressByPasteViewController = _R.storyboard.selectAddressByPasteViewController()
    /// Storyboard `SelectAddressByQRViewController`.
    static let selectAddressByQRViewController = _R.storyboard.selectAddressByQRViewController()
    /// Storyboard `SelectAmountViewController`.
    static let selectAmountViewController = _R.storyboard.selectAmountViewController()
    /// Storyboard `SendBaseViewController`.
    static let sendBaseViewController = _R.storyboard.sendBaseViewController()
    /// Storyboard `SendConfirmationViewController`.
    static let sendConfirmationViewController = _R.storyboard.sendConfirmationViewController()
    /// Storyboard `SettingViewController`.
    static let settingViewController = _R.storyboard.settingViewController()
    /// Storyboard `SuggestBackupViewController`.
    static let suggestBackupViewController = _R.storyboard.suggestBackupViewController()
    /// Storyboard `SwipableViewController`.
    static let swipableViewController = _R.storyboard.swipableViewController()
    /// Storyboard `TransactionHistoryViewController`.
    static let transactionHistoryViewController = _R.storyboard.transactionHistoryViewController()
    /// Storyboard `TutorialViewController`.
    static let tutorialViewController = _R.storyboard.tutorialViewController()
    
    /// `UIStoryboard(name: "AgreeServiceTermsViewController", bundle: ...)`
    static func agreeServiceTermsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.agreeServiceTermsViewController)
    }
    
    /// `UIStoryboard(name: "BackupViewController", bundle: ...)`
    static func backupViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.backupViewController)
    }
    
    /// `UIStoryboard(name: "CreateWalletViewController", bundle: ...)`
    static func createWalletViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createWalletViewController)
    }
    
    /// `UIStoryboard(name: "DebugListViewController", bundle: ...)`
    static func debugListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.debugListViewController)
    }
    
    /// `UIStoryboard(name: "HomeViewController", bundle: ...)`
    static func homeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeViewController)
    }
    
    /// `UIStoryboard(name: "LatestTransactionListViewController", bundle: ...)`
    static func latestTransactionListViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.latestTransactionListViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MaintenanceViewController", bundle: ...)`
    static func maintenanceViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.maintenanceViewController)
    }
    
    /// `UIStoryboard(name: "MyWalletViewController", bundle: ...)`
    static func myWalletViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myWalletViewController)
    }
    
    /// `UIStoryboard(name: "ReceiveViewController", bundle: ...)`
    static func receiveViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.receiveViewController)
    }
    
    /// `UIStoryboard(name: "RestoreWalletViewController", bundle: ...)`
    static func restoreWalletViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.restoreWalletViewController)
    }
    
    /// `UIStoryboard(name: "SelectAddressByPasteViewController", bundle: ...)`
    static func selectAddressByPasteViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selectAddressByPasteViewController)
    }
    
    /// `UIStoryboard(name: "SelectAddressByQRViewController", bundle: ...)`
    static func selectAddressByQRViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selectAddressByQRViewController)
    }
    
    /// `UIStoryboard(name: "SelectAmountViewController", bundle: ...)`
    static func selectAmountViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.selectAmountViewController)
    }
    
    /// `UIStoryboard(name: "SendBaseViewController", bundle: ...)`
    static func sendBaseViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendBaseViewController)
    }
    
    /// `UIStoryboard(name: "SendConfirmationViewController", bundle: ...)`
    static func sendConfirmationViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendConfirmationViewController)
    }
    
    /// `UIStoryboard(name: "SettingViewController", bundle: ...)`
    static func settingViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingViewController)
    }
    
    /// `UIStoryboard(name: "SuggestBackupViewController", bundle: ...)`
    static func suggestBackupViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.suggestBackupViewController)
    }
    
    /// `UIStoryboard(name: "SwipableViewController", bundle: ...)`
    static func swipableViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.swipableViewController)
    }
    
    /// `UIStoryboard(name: "TransactionHistoryViewController", bundle: ...)`
    static func transactionHistoryViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transactionHistoryViewController)
    }
    
    /// `UIStoryboard(name: "TutorialViewController", bundle: ...)`
    static func tutorialViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.homeViewController` struct is generated, and contains static references to 2 localization keys.
    struct homeViewController {
      /// en translation:  Receive
      /// 
      /// Locales: en, ja
      static let hAW4A71NormalTitle = Rswift.StringResource(key: "8hA-w4-a71.normalTitle", tableName: "HomeViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: My Wallet
      /// 
      /// Locales: en, ja
      static let oPJVcJOeText = Rswift.StringResource(key: "oPJ-vc-JOe.text", tableName: "HomeViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation:  Receive
      /// 
      /// Locales: en, ja
      static func hAW4A71NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("8hA-w4-a71.normalTitle", tableName: "HomeViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Wallet
      /// 
      /// Locales: en, ja
      static func oPJVcJOeText(_: Void = ()) -> String {
        return NSLocalizedString("oPJ-vc-JOe.text", tableName: "HomeViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Please leave enough time and try again
      /// 
      /// Locales: en, ja
      static let error_message_about_system = Rswift.StringResource(key: "error_message_about_system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please restart the application once
      /// 
      /// Locales: en, ja
      static let error_message_about_fatal = Rswift.StringResource(key: "error_message_about_fatal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please try again in a good network location
      /// 
      /// Locales: en, ja
      static let error_message_no_connection = Rswift.StringResource(key: "error_message_no_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: fatal error
      /// 
      /// Locales: en, ja
      static let error_title_about_fatal = Rswift.StringResource(key: "error_title_about_fatal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: no network
      /// 
      /// Locales: en, ja
      static let error_title_no_connection = Rswift.StringResource(key: "error_title_no_connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: system error
      /// 
      /// Locales: en, ja
      static let error_title_about_system = Rswift.StringResource(key: "error_title_about_system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: Please leave enough time and try again
      /// 
      /// Locales: en, ja
      static func error_message_about_system(_: Void = ()) -> String {
        return NSLocalizedString("error_message_about_system", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please restart the application once
      /// 
      /// Locales: en, ja
      static func error_message_about_fatal(_: Void = ()) -> String {
        return NSLocalizedString("error_message_about_fatal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please try again in a good network location
      /// 
      /// Locales: en, ja
      static func error_message_no_connection(_: Void = ()) -> String {
        return NSLocalizedString("error_message_no_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: fatal error
      /// 
      /// Locales: en, ja
      static func error_title_about_fatal(_: Void = ()) -> String {
        return NSLocalizedString("error_title_about_fatal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: no network
      /// 
      /// Locales: en, ja
      static func error_title_no_connection(_: Void = ()) -> String {
        return NSLocalizedString("error_title_no_connection", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: system error
      /// 
      /// Locales: en, ja
      static func error_title_about_system(_: Void = ()) -> String {
        return NSLocalizedString("error_title_about_system", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.myWalletViewController` struct is generated, and contains static references to 9 localization keys.
    struct myWalletViewController {
      /// en translation: -
      /// 
      /// Locales: en, ja
      static let iwtDl246Text = Rswift.StringResource(key: "Iwt-dl-246.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: -
      /// 
      /// Locales: en, ja
      static let kxfE0VfhText = Rswift.StringResource(key: "Kxf-E0-Vfh.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ETH
      /// 
      /// Locales: en, ja
      static let sNEHMBnlText = Rswift.StringResource(key: "sNE-hM-bnl.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Ethereum
      /// 
      /// Locales: en, ja
      static let lrVn2OsText = Rswift.StringResource(key: "3LR-Vn-2Os.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Latest Transaction
      /// 
      /// Locales: en, ja
      static let s07RDWPzText = Rswift.StringResource(key: "S07-RD-wPz.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: See more
      /// 
      /// Locales: en, ja
      static let ygzIBTEGNormalTitle = Rswift.StringResource(key: "Ygz-iB-tEG.normalTitle", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static let vbg2yKkVNormalTitle = Rswift.StringResource(key: "VBG-2y-KkV.normalTitle", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: USD
      /// 
      /// Locales: en, ja
      static let njrCwYUxText = Rswift.StringResource(key: "NJR-Cw-yUx.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Your ETH
      /// 
      /// Locales: en, ja
      static let tvRInSFDText = Rswift.StringResource(key: "TvR-in-SFD.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: -
      /// 
      /// Locales: en, ja
      static func iwtDl246Text(_: Void = ()) -> String {
        return NSLocalizedString("Iwt-dl-246.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: -
      /// 
      /// Locales: en, ja
      static func kxfE0VfhText(_: Void = ()) -> String {
        return NSLocalizedString("Kxf-E0-Vfh.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ETH
      /// 
      /// Locales: en, ja
      static func sNEHMBnlText(_: Void = ()) -> String {
        return NSLocalizedString("sNE-hM-bnl.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ethereum
      /// 
      /// Locales: en, ja
      static func lrVn2OsText(_: Void = ()) -> String {
        return NSLocalizedString("3LR-Vn-2Os.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Latest Transaction
      /// 
      /// Locales: en, ja
      static func s07RDWPzText(_: Void = ()) -> String {
        return NSLocalizedString("S07-RD-wPz.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: See more
      /// 
      /// Locales: en, ja
      static func ygzIBTEGNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ygz-iB-tEG.normalTitle", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static func vbg2yKkVNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("VBG-2y-KkV.normalTitle", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: USD
      /// 
      /// Locales: en, ja
      static func njrCwYUxText(_: Void = ()) -> String {
        return NSLocalizedString("NJR-Cw-yUx.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your ETH
      /// 
      /// Locales: en, ja
      static func tvRInSFDText(_: Void = ()) -> String {
        return NSLocalizedString("TvR-in-SFD.text", tableName: "MyWalletViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _BalanceAccessoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BalanceAccessoryView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BalanceAccessoryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceAccessoryView
      }
      
      fileprivate init() {}
    }
    
    struct _TutorialTopView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialTopView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TutorialTopView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialTopView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try myWalletViewController.validate()
      try createWalletViewController.validate()
      try suggestBackupViewController.validate()
      try launchScreen.validate()
      try latestTransactionListViewController.validate()
      try sendConfirmationViewController.validate()
      try maintenanceViewController.validate()
      try homeViewController.validate()
    }
    
    struct agreeServiceTermsViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = AgreeServiceTermsViewController
      
      let bundle = R.hostingBundle
      let name = "AgreeServiceTermsViewController"
      
      fileprivate init() {}
    }
    
    struct backupViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = BackupViewController
      
      let bundle = R.hostingBundle
      let name = "BackupViewController"
      
      fileprivate init() {}
    }
    
    struct createWalletViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CreateWalletViewController
      
      let bundle = R.hostingBundle
      let name = "CreateWalletViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo_vertical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_vertical' is used in storyboard 'CreateWalletViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct debugListViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = DebugListViewController
      
      let bundle = R.hostingBundle
      let name = "DebugListViewController"
      
      fileprivate init() {}
    }
    
    struct homeViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController
      
      let bundle = R.hostingBundle
      let name = "HomeViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "toolbar_shadow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'toolbar_shadow' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_receive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_receive' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting' is used in storyboard 'HomeViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct latestTransactionListViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LatestTransactionListViewController
      
      let bundle = R.hostingBundle
      let name = "LatestTransactionListViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_empty") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_empty' is used in storyboard 'LatestTransactionListViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_splash_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_splash_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct maintenanceViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MaintenanceViewController
      
      let bundle = R.hostingBundle
      let name = "MaintenanceViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_warning") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_warning' is used in storyboard 'MaintenanceViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct myWalletViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyWalletViewController
      
      let bundle = R.hostingBundle
      let name = "MyWalletViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "bg_wallet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_wallet' is used in storyboard 'MyWalletViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct receiveViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ReceiveViewController
      
      let bundle = R.hostingBundle
      let name = "ReceiveViewController"
      
      fileprivate init() {}
    }
    
    struct restoreWalletViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = RestoreWalletViewController
      
      let bundle = R.hostingBundle
      let name = "RestoreWalletViewController"
      
      fileprivate init() {}
    }
    
    struct selectAddressByPasteViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SelectAddressByPasteViewController
      
      let bundle = R.hostingBundle
      let name = "SelectAddressByPasteViewController"
      
      fileprivate init() {}
    }
    
    struct selectAddressByQRViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SelectAddressByQRViewController
      
      let bundle = R.hostingBundle
      let name = "SelectAddressByQRViewController"
      
      fileprivate init() {}
    }
    
    struct selectAmountViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SelectAmountViewController
      
      let bundle = R.hostingBundle
      let name = "SelectAmountViewController"
      
      fileprivate init() {}
    }
    
    struct sendBaseViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SendBaseViewController
      
      let bundle = R.hostingBundle
      let name = "SendBaseViewController"
      
      fileprivate init() {}
    }
    
    struct sendConfirmationViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SendConfirmationViewController
      
      let bundle = R.hostingBundle
      let name = "SendConfirmationViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_send_success") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_send_success' is used in storyboard 'SendConfirmationViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SettingViewController
      
      let bundle = R.hostingBundle
      let name = "SettingViewController"
      
      fileprivate init() {}
    }
    
    struct suggestBackupViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SuggestBackupViewController
      
      let bundle = R.hostingBundle
      let name = "SuggestBackupViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_backup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_backup' is used in storyboard 'SuggestBackupViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct swipableViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SwipableViewController
      
      let bundle = R.hostingBundle
      let name = "SwipableViewController"
      
      fileprivate init() {}
    }
    
    struct transactionHistoryViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TransactionHistoryViewController
      
      let bundle = R.hostingBundle
      let name = "TransactionHistoryViewController"
      
      fileprivate init() {}
    }
    
    struct tutorialViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TutorialViewController
      
      let bundle = R.hostingBundle
      let name = "TutorialViewController"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
